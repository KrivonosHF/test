{"ast":null,"code":"import _objectWithoutProperties from \"/home/krivonos/projects/test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/krivonos/projects/test/src/editor/Editor.tsx\";\nimport React from \"react\";\nimport { createEditor, Node, Transforms, Editor } from \"slate\";\nimport { Editable, withReact, Slate } from \"slate-react\";\nimport { DefaultElement } from \"./elements\";\nimport { Toolbar } from \"./Toolbar\";\n\nfunction renderElement(props) {\n  const attributes = props.attributes,\n        children = props.children;\n  return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }\n  }), children);\n}\n\nfunction renderLeaf(props) {\n  const attributes = props.attributes,\n        children = props.children;\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }), children);\n}\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n  console.log(isActive, 666);\n\n  if (isActive) {\n    editor.removeMark(editor, format);\n  } else {\n    editor.addMark(editor, format, true);\n    console.log(editor, format, 44444);\n  }\n};\n\nconst isMarkActive = (editor, format) => {\n  console.log(editor, '------Z', format);\n  const marks = Editor.marks(editor);\n  console.log(marks);\n  return marks ? marks[format] === true : false;\n};\n\nexport function EditorComponent(props) {\n  const value = props.value,\n        onChange = props.onChange,\n        other = _objectWithoutProperties(props, [\"value\", \"onChange\"]);\n\n  const editor = React.useMemo(() => withReact(createEditor()), []);\n  return /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    open: true,\n    editor: editor,\n    toggleMark: toggleMark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n            console.log(editor, 888);\n            Transforms.setNodes(editor, {\n              bold: true\n            }, {\n              // at: range,\n              // match: node => Text.isText(node),\n              split: true\n            }); // const [match] = editor(editor, {\n            //   match: n => n.type === 'code',\n            // })\n            // Transforms.setNodes(\n            //   editor,\n            // { type: 'code' },\n            // { match: n => editor.isBlock(editor, n) }\n            // )\n\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            console.log(event.key); // Transforms.setNodes(\n            //   editor,\n            //   { bold: true },\n            //   { match: n => Text.isText(n), split: true }\n            // )\n\n            break;\n          }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}\nexport { Node };","map":{"version":3,"sources":["/home/krivonos/projects/test/src/editor/Editor.tsx"],"names":["React","createEditor","Node","Transforms","Editor","Editable","withReact","Slate","DefaultElement","Toolbar","renderElement","props","attributes","children","renderLeaf","toggleMark","editor","format","isActive","isMarkActive","console","log","removeMark","addMark","marks","EditorComponent","value","onChange","other","useMemo","event","ctrlKey","key","preventDefault","setNodes","bold","split"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { createEditor, Node, Transforms, Editor } from \"slate\";\nimport {\n  Editable,\n  withReact,\n  Slate,\n  RenderElementProps,\n  RenderLeafProps,\n  useSlate,\n} from \"slate-react\";\nimport { DefaultElement } from \"./elements\";\nimport { Toolbar } from \"./Toolbar\";\n\n\nfunction renderElement(props: RenderElementProps) {\n  const { attributes, children } = props;\n  return <DefaultElement {...attributes}>{children}</DefaultElement>;\n}\n\nfunction renderLeaf(props: RenderLeafProps) {\n  const { attributes, children } = props;\n  return <span {...attributes}>{children}</span>;\n}\n\nconst toggleMark = (editor: any, format: any) => {\n  const isActive = isMarkActive(editor, format)\n  console.log(isActive, 666)\n  if (isActive) {\n    editor.removeMark(editor, format)\n  } else {\n    editor.addMark(editor, format, true)\n    console.log(editor, format, 44444)\n  }\n}\nconst isMarkActive = (editor: any, format: any) => {\n  console.log(editor, '------Z', format)\n  const marks = Editor.marks(editor)\n  console.log(marks)\n  return marks ? marks[format] === true : false\n}\n\nexport interface EditorProps {\n  value: Node[];\n  onChange: (value: Node[]) => void;\n  placeholder?: string;\n  autoFocus?: boolean;\n  spellCheck?: boolean;\n  renderMark?: any; \n}\n\nexport function EditorComponent(props: EditorProps) {\n  const { value, onChange, ...other } = props;\n  const editor = React.useMemo(() => withReact(createEditor()), []);\n\n  return (\n    <Slate editor={editor} value={value} onChange={onChange}>\n      <Toolbar open={true} editor={editor} toggleMark={toggleMark} />\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={event => {\n          if (!event.ctrlKey) {\n            return\n          }\n\n          switch (event.key) {\n            case '`': {\n              event.preventDefault()\n              console.log(editor, 888)\n               Transforms.setNodes(\n                editor,\n                { bold: true },\n                {\n                  // at: range,\n                 // match: node => Text.isText(node),\n                  split: true,\n                }\n              \n              )\n              \n              // const [match] = editor(editor, {\n              //   match: n => n.type === 'code',\n              // })\n              // Transforms.setNodes(\n              //   editor,\n              // { type: 'code' },\n              // { match: n => editor.isBlock(editor, n) }\n              // )\n              break\n            }\n\n            case 'b': {\n              event.preventDefault()\n              console.log(event.key)\n\n              // Transforms.setNodes(\n              //   editor,\n              //   { bold: true },\n              //   { match: n => Text.isText(n), split: true }\n              // )\n              break\n            }\n          }\n        }}\n      />\n    </Slate>\n  );\n}\n\nexport { Node };\n"]},"metadata":{},"sourceType":"module"}